
[

172.104.47.95  webserver1

172.105.50.54  dbserver1

139.162.195.46 appserver1

change line no 71 for ansible.cfg 

[webserver]
webserver1
[dbserver]
dbserver1
[appserver]
appserver1


Adhoc command 

ansible webserver1 -m shell -a "cat /etc/passwd" -k 

-a argument



ansible webserver1 -m copy -a "src=file1 dest=. backup=yes" -k

(backup=yes    if file already have  take backup of old file )

lineinifile ( add or change in particular line )

copy
lineinfile
user
yum/apt-get


Playbook
--------

start with ---
end with ...



key value pair
list
dictionary

key value pair

fruit: apple 

fruit key
apple value 


list

---
-
 fruit:
  - apple
  - orange
  - pinapple

dictionary

fruit
 - apple 
     fat: dd
     cal: ss
 


playbook having the following section

host
varibale 
roles
handlers
tasks

mkdir playbooks
vim first.yml

---
#host
- host: webserver1
#variables
#roles
#handler
#tasks
  tasks:
  gather_facts: no
    - name: chk the connectivity
      ping:  

ansible-playbook --syntax-check first.yml


ansbible webserver -m setup -k	( it will display the server details )


variables declaration as host

vi /etc/ansible/hosts

machine3 anisble_ssh_pass="passwod"


variables diclaration in yaml file
-----------------------------------

--
- hosts: machine3
  gather_facts: no
  tasks:
   - name: check the connectivity
    shell: cat /etc//passwd | grep root
    register: a					( store the value in a variables)
    
   - name: get the variable value
     debug: 					(debug module)
      var: a.stdout				(get variables)



variables declarationg


--
- hosts: machine3
  gather_facts: no
#variables
  vars:
   filename: /etc/group
   username: root
  tasks:
   - name: check the connectivity
    shell: cat "{{ filename }}" | grep "{{ username }}"
    register: a					( store the value in a variables)
    
   - name: get the variable value
     debug: 					(debug module)
      var: a.stdout				(get varibles)


Variables declaration using file

--
- hosts: machine3
  gather_facts: no
#variables
  vars_files:
   - hello.yml
  tasks:
   - name: check the connectivity
    shell: cat "{{ filename }}" | grep "{{ username }}"
    register: a					( store the value in a variables)
    
   - name: get the variable value
     debug: 					(debug module)
      var: a.stdout	


hello.yml

username: root
filename: /etc/group

...




user creation

	- hosts: machine1,machine2,machine3
  tastk:
   - name: creating user
     user:
      name: abbas
      password: "aaa"
      create_home: yes
      shell: /bin/bash
      groups: sudo 	(groups for secondary group)


passwd creation:

mkpasswd -m sha-512 > pass.txt

user delete - 
------------

user2.yml

---
- hosts: machine2
  var_prompt: 
    - name: username
      prompt: "what is your username"
      private: no               (visible)

    - name: password 
      prompt: "what is password"
      private: yes
      encrypt: "sha512_crypt"
      confirm: yes
    tasks:
    - name: create user
      user:
       name: "{{ username }}"
       password: "{{ password }}"
       state: present
       shell: /bin/bash


---
- host: machine3
  tastk:
   - name: creating user
     user:
      name: "{{ item }}"
      password: "aaa"
      create_home: yes
      shell: /bin/bash
      groups: sudo 	(groups for secondary group)
      state: present
     loop:
       - user5
       - user6  

variables declaration for group
set password for group

vi /etc/ansible/hosts
[infra:vars]
ansible_ssh_pass="hello!!@#"


condition:

---
- hosts: infra
  tasks:
   - name: check connectivity
     ping:
     when: ansible_facts['distribution'] == 'Centos'



 using and condition
---
- hosts: infra
  tasks:
   - name: check connectivity
     ping:
     when: (ansible_facts['distribution'] == 'Centos' and ansible_facts['distribution'] == 'Centos')


using or condition:


---
- hosts: infra
  tasks:
   - name: check connectivity
     ping:
     when: (ansible_facts['distribution'] == 'Centos' or ansible_facts['distribution'] == 'Centos')


webserver configuration

---
- hosts: machine3
  vars:
   pkg: apache2
  tasks:
   - name: install webserver
     apt:
      name: "{{ pkg }}"
      state: present
      update_cache: yes
   - name: server start
     systemd:
       name: "{{ pkg }}"
       enabled: yes
       state: started
   - name: configuring web application
     copy: 
      src: index.html
      dest: /var/www/html
      backup: yes
   - name: Restart the webserver
     systemd:
       name: "{{ pkg }}"
       state: restarted
 

handlers
--------

---
- hosts: machine3
  vars:
   pkg: apache2
  handlers: 
     - name: webserver_start
     systemd:
       name: "{{ pkg }}"
       enabled: yes
       state: started

      - name: webserver_restart
         systemd:
         name: "{{ pkg }}"
       enabled: yes
       state: started


  tasks:
   - name: install webserver
     apt:
      name: "{{ pkg }}"
      state: present
      update_cache: yes# 
   - name: server start
     systemd:
       name: "{{ pkg }}"
       enabled: yes
       state: started
       notify:
       - start_webserver
   - name: configuring web application
     copy: 
      src: index.html
      dest: /var/www/html
      backup: yes
     notify: 
       - restart_webserver
 

ansible vault - for encrypt file


# ansible-vault encrypt when.yml

edit encrypt file


# ansible-vault edit when.yml


run yml file

# ansible-vault when.yml -k --ask-vault-pass


change vault passwd

# ansible-vault rekey when.yml

decrypt or remove 


# ansible-vault decrypt when.yml 


ansible vault create

# ansible-vault test.yml


Add multiple playbook

play1.yml

---
- hosts: machine1
  tasks:
    - name: check connectivity
      ping:


play2.yml

---
- hosts: machine2
  tasks:
    - name: check connectivity
      ping:


plays.yml

---
- import_playbook: play1.yml
- import_playbook: play2.yml




tags:
------

to run particular task using tags

tag.yml

---
- hosts: machine1
  tasks:
    - name: check connectivity
      ping:
      tags: one
   - name: check connectivity
      shell: cat /etc/passwd
      tags: two


# ansible-playbook --tags one tag.yml

# ansible-playbook --tags two tag.yml

# ansible-playbook --tags two,one tag.yml


Roles
-----




